"""
LLM Orchestrator module for generating responses using LangChain and OpenAI
"""
import os
import re
import logging
from langchain_openai import ChatOpenAI
from langchain_core.messages import SystemMessage, HumanMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain.chains import LLMChain
from langchain_core.prompts import PromptTemplate

logger = logging.getLogger(__name__)

# Removed get_llm_for_entity_extraction function as it's no longer needed

def enhance_persona(clone_name: str, clone_role: str, original_persona: str) -> str | None:
    """
    Enhances the original persona description using an LLM based on a specific prompt.

    Args:
        clone_name: The name of the clone.
        clone_role: The role of the clone.
        original_persona: The user-provided initial persona description.

    Returns:
        str: The enhanced persona description generated by the LLM, or None if an error occurs.
    """
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not openai_api_key:
        logger.error("OPENAI_API_KEY environment variable not set for persona enhancement.")
        return None

    try:
        model = ChatOpenAI(
            temperature=0.5, # Slightly higher temp for creative rewriting
            model_name="gpt-3.5-turbo", # Standard model is sufficient
            openai_api_key=openai_api_key,
            max_tokens=200 # Max length for the enhanced persona
        )

        prompt_template_str = """You are an expert prompt engineer tasked with refining a persona description for an AI clone named '{clone_name}', a virtual '{clone_role}'. Your goal is to rewrite the user-provided description into a clear, detailed, and effective system prompt preamble.

Specifically:

- Clearly define the clone's primary function and role.
- Highlight its core areas of expertise and key knowledge domains.
- Explicitly outline the intended communication style, including tone, language, and interaction patterns.
- Provide concrete examples or analogies illustrating ideal behaviors or typical interactions.
- Clearly mention any specific constraints, limitations, or behavioral guidelines the clone should follow.

Use precise, specific, and actionable language. Avoid ambiguity and ensure the rewritten description is optimized for model accuracy, consistency, and strict adherence to the intended persona. Keep the rewritten description under 150 words.

Initial Description:
{original_persona}

Rewritten Persona Description:"""

        prompt_template = PromptTemplate.from_template(prompt_template_str)

        chain = prompt_template | model | StrOutputParser()

        logger.info(f"Enhancing persona for clone: {clone_name}")
        enhanced_persona_text = chain.invoke({
            "clone_name": clone_name,
            "clone_role": clone_role,
            "original_persona": original_persona
        })

        logger.info(f"Successfully enhanced persona for clone: {clone_name}")
        return enhanced_persona_text.strip()

    except Exception as e:
        logger.error(f"Error enhancing persona for clone '{clone_name}': {e}")
        return None
