"""
LLM Orchestrator module for generating responses using LangChain and OpenAI
"""
import os
import re
import logging
# from langchain_openai import ChatOpenAI # Removed OpenAI import
from langchain_google_genai import ChatGoogleGenerativeAI # Added Google GenAI import
from langchain_core.messages import SystemMessage, HumanMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain.chains import LLMChain
from langchain_core.prompts import PromptTemplate

logger = logging.getLogger(__name__)

# Removed get_llm_for_entity_extraction function as it's no longer needed

def enhance_persona(clone_name: str, clone_role: str, original_persona: str) -> str | None:
    """
    Enhances the original persona description using an LLM based on a specific prompt.

    Args:
        clone_name: The name of the clone.
        clone_role: The role of the clone.
        original_persona: The user-provided initial persona description.

    Returns:
        str: The enhanced persona description generated by the LLM, or None if an error occurs.
    """
    google_api_key = os.getenv("GOOGLE_API_KEY") # Check for Google API Key
    if not google_api_key:
        logger.error("GOOGLE_API_KEY environment variable not set for persona enhancement.")
        # Consider checking for Application Default Credentials (ADC) as well if running on GCP
        return None

    try:
        # Instantiate the Gemini model
        model = ChatGoogleGenerativeAI(
            model="gemini-1.5-pro-latest", # Use the latest Gemini Pro model
            temperature=0.5,
            google_api_key=google_api_key,
            # max_output_tokens=200 # Note: Gemini uses max_output_tokens, not max_tokens
            convert_system_message_to_human=True # Recommended for some Gemini models
        )

        # Ensure the template string uses double braces {{ }} for literal braces if needed,
        # or correctly escapes single braces if they are not meant for formatting.
        # In this case, the braces seem correctly used for f-string-like formatting.
        prompt_template_str = """You are an expert prompt engineer tasked with refining a persona description for an AI clone named '{clone_name}', a virtual '{clone_role}'. Your goal is to rewrite the user-provided description into a clear, detailed, and effective system prompt preamble.

Specifically:

- Clearly define the clone's primary function and role.
- Highlight its core areas of expertise and key knowledge domains.
- Explicitly outline the intended communication style, including tone, language, and interaction patterns.
- Provide concrete examples or analogies illustrating ideal behaviors or typical interactions.
- Clearly mention any specific constraints, limitations, or behavioral guidelines the clone should follow.

Use precise, specific, and actionable language. Avoid ambiguity and ensure the rewritten description is optimized for model accuracy, consistency, and strict adherence to the intended persona. Keep the rewritten description under 150 words.

Initial Description:
{original_persona}

Rewritten Persona Description:""" # No apparent formatting issues here.

        # Check if PromptTemplate.from_template handles the format correctly.
        # The error logs pointed to issues here, potentially due to Langchain version changes
        # or unexpected characters in the input variables. Adding a try-except block for robustness.
        try:
            prompt_template = PromptTemplate.from_template(prompt_template_str)
            chain = prompt_template | model | StrOutputParser()
        except ValueError as e:
             logger.error(f"Error creating PromptTemplate or Chain in enhance_persona: {e}")
             logger.error(f"Template string causing error: {prompt_template_str}")
             return None # Return None if template creation fails

        logger.info(f"Enhancing persona for clone: {clone_name}")
        enhanced_persona_text = chain.invoke({
            "clone_name": clone_name,
            "clone_role": clone_role,
            "original_persona": original_persona
        })

        logger.info(f"Successfully enhanced persona for clone: {clone_name}")
        return enhanced_persona_text.strip()

    except Exception as e:
        logger.error(f"Error enhancing persona for clone '{clone_name}': {e}")
        return None
