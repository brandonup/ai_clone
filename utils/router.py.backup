"""
Router module for deciding how to answer user queries
"""
import re
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def choose_route(question, ragie_chunks):
    """
    Determine the appropriate route for answering a question
    using the RAG-first approach with web search fallback
    
    Args:
        question: User question
        ragie_chunks: List of chunks retrieved from Ragie
        
    Returns:
        str: Route choice - "ragie", "force_ragie", "web", or "base"
    """
    # If Ragie returned any chunks, use them
    if ragie_chunks:
        logger.info(f"Routing to 'ragie' because chunks were found")
        return "ragie"
    
    # Normalize question for analysis
    q_lower = question.lower().strip()
    
    # Check for web search indicators
    web_search_patterns = [
        # Current events and time-sensitive information
        r'\b(latest|recent|current|today|yesterday|tomorrow|this week|this month|this year)\b',
        r'\b(news|update|development)\b',
        
        # Specific dates that suggest current information
        r'\b(in 2024|in 2025|2024|2025)\b',
        
        # Weather, sports, and other real-time information
        r'\b(weather|forecast|temperature|score|game|match)\b',
        
        # Market and financial information
        r'\b(stock|price|market|rate|exchange)\b',
        
        # Explicit web search requests
        r'\b(search (for|about)|find online|look up|google)\b',
        
        # Questions about people that might need current info
        r'\b(who is|what is) ([a-z]+ [a-z]+)( doing| now|\?)',
        
        # Questions about movies, events, or activities happening now
        r'\b(movie|playing|showing|theater|theatre|cinema)\b',
        
        # Questions about protests, events, or incidents
        r'\b(protest|event|incident|happening|occurred)\b',
    ]
    
    # Check if any web search patterns match
    for pattern in web_search_patterns:
        if re.search(pattern, q_lower):
            logger.info(f"Routing to 'web' because pattern matched: {pattern}")
            return "web"
    
    # Check for base LLM indicators (questions that don't need external knowledge)
    base_llm_patterns = [
        # General advice or opinion questions
        r'^(what (do|would) you|how (do|would|can) you)',
        r'^(can you|could you) (help|advise|suggest)',
        
        # Hypothetical scenarios
        r'(if|imagine|suppose|what if)',
        
        # Personal coaching questions
        r'(how (can|should) i|what (can|should) i)',
        r'(advice|suggestion|tip|help) (for|with|on)',
        
        # Simple factual questions that a general LLM should know
        r'^(what is|who is|how does) (a|an|the)',
    ]
    
    # Check if any base LLM patterns match
    for pattern in base_llm_patterns:
        if re.search(pattern, q_lower):
            logger.info(f"Routing to 'base' because pattern matched: {pattern}")
            return "base"
    
    # Default to trying RAG again with a modified query
    # This implements the advanced RAG optimization approach
    logger.info(f"Routing to 'force_ragie' as default")
    return "force_ragie"
